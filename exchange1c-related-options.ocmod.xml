<modification>
	<name>Exchange1C Module for OpenCart 2.3 (related_options)</name>
	<version>1.6.4.1_oc2.3_related_options</version>
	<id>OpenCart Exchange1C (related_options)</id> 
	<author>KirilLoveVE</author>
	<link>https://github.com/KirilLoveVE/opencart2-exchange1c</link>
	<code>exchange1c-related-options</code>

	<file path="catalog/view/theme/*/template/account/order_info.tpl">
		<operation>
			<search><![CDATA[<td class="text-right"><?php echo $column_price; ?></td>]]></search>
			<add position="before"><![CDATA[        <td class="text-right"><?php echo $column_unit; ?></td>]]></add>
		</operation>
		<operation>
			<search><![CDATA[<td class="text-right"><?php echo $product['price']; ?></td>]]></search>
			<add position="before"><![CDATA[        <td class="text-right"><?php echo $product['unit_name']; ?></td>]]></add>
		</operation>
		<operation>
			<search index="1"><![CDATA[<td class="text-right"><?php echo $voucher['amount']; ?></td>]]></search>
			<add position="before"><![CDATA[        <td class="text-right"><?php echo $voucher['amount']; ?></td>]]></add>
		</operation>
		<operation>
			<search><![CDATA[<td colspan="3"></td>]]></search>
			<add position="replace"><![CDATA[<td class="text-right" colspan="5">]]></add>
		</operation>
		<operation>
			<search><![CDATA[<td class="text-right"><b><?php echo $total['title']; ?></b></td>]]></search>
			<add position="replace"><![CDATA[<b><?php echo $total['title']; ?></b></td>]]></add>
		</operation>
	</file>

	<file path="catalog/controller/product/product.php">
		<operation>
			<search><![CDATA[$data['sticker'] = $this->getStickers($product_info['product_id']);]]></search>
			<add position="after"><![CDATA[			// +++ Tesla-Chita(2)
			$this->load->model('catalog/exchange1c');
			$product_info['quantity'] = ($product_info['quantity'] - (int)$product_info['quantity']) ? $product_info['quantity'] : (int)$product_info['quantity'];
			$customer_group_id = $this->customer->isLogged()? $this->customer->getGroupId() : $this->config->get('config_customer_group_id');

			$data['currency_data'] = array(
				'symbol'  => $this->currency->getSymbolRight($this->session->data['currency']),
				'decimal' => $this->currency->getDecimalPlace($this->session->data['currency']),
				'value'	  => $this->currency->getValue($this->session->data['currency'])
			);

			$product_features_data = $this->model_catalog_exchange1c->getProductFeatures($data['product_id'], $customer_group_id, $data['currency_data']['value'], $product_info['tax_class_id']);

			$data['product_features_price']		= $product_features_data['features_price'];
			$data['product_features_options']	= $product_features_data['features_options'];
			$data['product_features_options_values']	= $product_features_data['features_options_values'];
			$product_option_values				= $product_features_data['option_values'];

			$product_quantity_data = $this->model_catalog_exchange1c->getProductQuantity($data['product_id'], $customer_group_id);
			$data['product_quantity'] = $product_quantity_data['quantity'];
			$data['quantity_total']	= count($data['product_quantity']) ? $product_quantity_data['quantity'] : $product_info['quantity'];
			
			// --- Tesla-Chita]]></add>
		</operation>
		<operation>
			<search><![CDATA[$product_option_value_data[] = array(]]></search>
			<add position="before"><![CDATA[						// +++ TESLA-CHITA
						$class = "";
						foreach ($product_option_values[$option_value['product_option_value_id']] as $value) {
							if (empty($class)) {
								$class = $value;
							} else {
								$class .= " " . $value;
							}
						}
						// --- TESLA-CHITA

]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['stock'] = $product_info['quantity'];]]></search>
			<add position="replace"><![CDATA[$data['stock'] = $product_info['quantity'] . (empty($data['unit_name']) ? "": " " . $data['unit_name']);]]></add>
		</operation>
		<operation>
			<search><![CDATA['product_option_value_id' => $option_value['product_option_value_id'],]]></search>
			<add position="after"><![CDATA[							// +++ TESLA-CHITA
							'price_prefix'            => $option_value['price_prefix'],
							'class'                   => $class,
							// --- TESLA-CHITA]]></add>
		</operation>
	</file>

	<file path="catalog/model/catalog/product.php">
		<operation>
			<search><![CDATA[public function getTotalProductSpecials() {]]></search>
			<add position="before"><![CDATA[	// +++ TESLA-CHITA
	public function getProductFeaturesPrice($product_id, $product_feature_id, $customer_group_id=0, $unit_id=0) {
		$str_customer_group_id  = $customer_group_id ? " AND customer_group_id = " . $customer_group_id : "";
		$sql = "SELECT price FROM " . DB_PREFIX . "product_price WHERE product_id = " . $product_id . " AND product_feature_id = " . $product_feature_id . $str_customer_group_id;
		$query = $this->db->query($sql);

		if ($query->num_rows) {
			return $query->rows;
		} else {
			return 0;
		}
	}
	// --- TESLA-CHITA
]]></add>
		</operation>
	</file>

	<file path="catalog/view/theme/*/template/product/product.tpl">
		<operation>
			<search><![CDATA[><?php echo $text_stock; ?>]]></search>
			<add position="replace"><![CDATA[ id="stock"><?php echo $text_stock; ?>]]></add>
		</operation>
		<operation>
			<search><![CDATA[><?php echo $price; ?><]]></search>
			<add position="replace"><![CDATA[ id="price"><?php echo $price; ?><]]></add>
		</operation>
		<operation>
			<search><![CDATA[><?php echo $text_tax; ?>]]></search>
			<add position="replace"><![CDATA[ id="tax"><?php echo $text_tax; ?>]]></add>
		</operation>
		<operation>
			<search><![CDATA[><?php echo $text_points; ?>]]></search>
			<add position="replace"><![CDATA[ id="points"><?php echo $text_points; ?>]]></add>
		</operation>
		<operation>
			<search><![CDATA[<option value="<?php echo $option_value['product_option_value_id']; ?>">]]></search>
			<add position="replace"><![CDATA[<option class="<?php echo $option_value['class']; ?>" value="<?php echo $option_value['product_option_value_id']; ?>">]]></add>
		</operation>
		<operation>
			<search><![CDATA[<input type="radio" name="option[<?php echo $option['product_option_id']; ?>]"]]></search>
			<add position="replace"><![CDATA[<input class="<?php echo $option_value['class']; ?>" type="radio" name="option[<?php echo $option['product_option_id']; ?>]"]]></add>
		</operation>
		<operation>
			<search><![CDATA[<input type="checkbox" name="option[<?php echo $option['product_option_id']; ?>][]"]]></search>
			<add position="replace"><![CDATA[<input class="<?php echo $option_value['class']; ?>" type="checkbox" name="option[<?php echo $option['product_option_id']; ?>]"]]></add>
		</operation>
		<operation>
			<search><![CDATA[value="<?php echo $product_id; ?>" />]]></search>
			<add position="after"><![CDATA[              <input type="hidden" name="unit_id" value="0" />
]]></add>
		</operation>
		<operation>
			<search><![CDATA[$(document).ready(function() {]]></search>
			<add position="before"><![CDATA[var text_stock = "<?php echo $text_stock; ?>";
var text_tax = "<?php echo $text_tax; ?>";
<?php
if (isset($warehouses)) {
	echo "var \$warehouses = {";
	foreach ($warehouses as $warehouse_id => $name) {
		echo "'" . $warehouse_id . "':'" . $name . "',";
	}
	echo "}\n";
}
?>
<?php if ($options) {?>
//------------------------------------------------------------------------------------------------------------------------------
// Тут хранится id выбранной характеристики
var product_feature_id = '0';
// Выбранный склад
var warehouse_id = '0';
// Остаток общий
var quantity_total = <?php echo $quantity_total; ?>;
// Базовая единица измерения
var unit_name = '';
// Дополнительная упаковка
var product_unit_id = 0;

// Определение переменных для характеристик
// Получим типы опций
var $options_type = {<?php foreach ($options as $option) { echo $option['product_option_id'].":'".$option['type']."',"; }?>};
// Порядок опций
var options_order = [<?php foreach ($options as $option) { echo $option['product_option_id'].","; }?>];
// Обязательные опции
var $options_required = {<?php foreach ($options as $option) { echo $option['product_option_id'].":true,"; }?>};
// Объект, список характеристик с существующими вариантами опций
// {feature_id:{option_id:value_id},...},...}
var $options = {<?php
	foreach ($product_features_options as $product_feature_id => $feature) {
		$str_value = "'".$product_feature_id."':{";
		foreach ($feature as $product_option_id => $product_option_value_id) {
			$str_value .= "'".$product_option_id."':".$product_option_value_id.",";
		}
		$str_value .= "},";
		echo $str_value;
	}
	echo "};\n";?>
// Формируем объект характеристики: {feature_id:{'price':число,'tax':число,'quantity':{}}}
<?php

	$str_features =  "var \$features = {";
	$str_price =  "var \$price = {";
	$str_quantity = "// quantity{product_feature_id:{warehouse_id:quantity}}\n";
	$str_quantity .=  "var \$quantities = {";
	foreach ($product_features_options as $product_feature_id => $feature_option) {
		// Цены
		$str_price .= "'" . $product_feature_id . "':{'value':" . $product_features_price[$product_feature_id]['value'] . ",'tax':" . $product_features_price[$product_feature_id]['tax'] . "},";
		// Характеристики
		$str_features .= "'" . implode("_", $feature_option) . "':" . $product_feature_id . ",";
		// Остатки
		$quantity_array = isset($product_quantity[$product_feature_id]) ? $product_quantity[$product_feature_id] : array();
		$str_quantity .= "'" . $product_feature_id . "':";

		$str_quantity .= "{";
		foreach ($quantity_array as $warehouse_id => $quantity) {
			$str_quantity .= "'" . $warehouse_id . "':" . $quantity . ",";
			$quantity_total += $quantity;
		}
		$str_quantity .= "},";

	}
	echo $str_features . "};\n";
	echo $str_price . "};\n";
	echo $str_quantity . "};\n";
	echo "var \$currency_data = {'symbol':'".$currency_data['symbol']."','decimal':".$currency_data['decimal']."};\n";
?>


//------------------------------------------------------------------------------------------------------------------------------
// Функция отображает остатки
// Возвращает строковую переменную в которой перечислены названия всех складов с остатками и единицами измерений
function displayQuantity() {

	var str = "";
	var warehouse_count = 0;
	var quantity = 0;

	// ОСТАТОК
 	if ($.isEmptyObject($quantities)) {

		// Нет остатков по складам или характеристикам
		str = quantity_total;

	} else {

  		// Ищем остаток для характеристики
		if (product_feature_id != '0') {
	  		$.each($quantities[product_feature_id],function(warehouse_id, p_quantity) {
				if (warehouse_id != '0' && p_quantity > 0) {
					warehouse_count ++;
				}
				quantity += p_quantity;
			});
		}
	}

	// Выводим строку с остатком
	if (warehouse_count > 0) {
		// Несколько складов
		str = " " + quantity + " " + unit_name + " (" + warehouse_count + " stores)";
	} else if (quantity > 0) {
		// Один склад и есть остаток
		str = " " + quantity + " " + unit_name;
	} else {
		str = " 0 " + unit_name;
	}
	return str;
} // displayQuantity()

//------------------------------------------------------------------------------------------------------------------------------
// Функция отображает на странице цену, налоги, остатки,
// а также, для передачи в корзину, устанавливает значение product_feature_id
function displaySelect() {
	if (product_feature_id != '0'){
		$('#price').text(Math.round($price[product_feature_id]['value']).toFixed($currency_data['decimal'])+$currency_data['symbol']);
		$('#tax').text(text_tax+" "+Math.round($price[product_feature_id]['tax']).toFixed($currency_data['decimal'])+$currency_data['symbol']);
		$('#stock').text(text_stock+" "+displayQuantity());
	} else {
		//$('#price').text("0 "+$currency_data['symbol']);
		//$('#tax').text(text_tax+" 0 "+$currency_data['symbol']);
		$('#stock').text(text_stock+" "+quantity_total+" "+unit_name);
	}
	$('input[name=\'product_unit_id\']').val(product_unit_id);
} // displaySelect()

//------------------------------------------------------------------------------------------------------------------------------
// Функция очищает все опции и разблокирует их, сбрасывает ид характеристики, а также обновляет надписи на страничке
function clearOptions() {

	// Перебираем все опции
	$.each($options_type,function(product_option_id, value) {

		if (value == "select") {

			// Делаем доступным опцию
			$('select[name="option['+product_option_id+']"]').attr("disabled",false);

			// Сбрасываем выбор, по-умолчанию будет выбран первый элемент
			$('select[name="option['+product_option_id+']"]').val('');

			// Делаем доступным все значения опции
			$('select[name="option['+product_option_id+']"] option').each(function(){
				$(this).removeAttr("disabled");
			});
		} else {

			// Делаем доступным опцию
			$('input[name="option['+product_option_id+']"]').attr("disabled",false);

			// Снимаем выбор со всех значений
			$('input[name="option['+product_option_id+']"]').attr('checked', false);
		}
		$options_required[product_option_id] = true;
	});

	// Проверка на обязательные опции
	checkRequired();

	// Сбрасываем выбранную характеристику
	product_feature_id = '0';

	// Обновляем надписи на страничке
	displaySelect();

} // clearOptions()

//------------------------------------------------------------------------------------------------------------------------------
// Функция проверяет и устанавливает какие опции обязательные, бывает что некоторые характеристики имеют разное количество опций
function checkRequired() {

	// Перебираем все опции
	$.each($options_required,function(product_option_id, required) {

		if ($options_type[product_option_id] == "select") {

			// Получаем элемент в котором устанавливается класс обязательной опции
			$form = $('select[name="option['+product_option_id+']"]').parents("div.form-group");

			// Если опция должна быть обязательной, а она не содержит класс "required", устанавливает этот класс или наоборот убираем его
			if (required && !$form.hasClass("required")) {
				$form.addClass("required");
			} else if (!required && $form.hasClass("required")) {
				$form.removeClass("required");
			}

		} else {

			// Получаем элемент в котором устанавливается класс обязательной опции
			$form = $('input[name="option['+product_option_id+']"]').parents("div.form-group");

			// Если опция должна быть обязательной, а она не содержит класс "required", устанавливает этот класс или наоборот убираем его
			if (required && !$form.hasClass("required")) {
				$form.addClass("required");
			} else if (!required && $form.hasClass("required")) {
				$form.removeClass("required");
			}
		}
	});
} // checkRequired()

//------------------------------------------------------------------------------------------------------------------------------
// Функция возвращает выбранные опции значений в виде объекта
// Возвращает $option_values - объект с опция и значениями
function getOptionValues() {
	var $option_values = {};

	// Перебираем опции в том порядке в каком они заданы на сайте
	$.each(options_order,function(index, product_option_id) {

		if ($options_type[product_option_id] == 'select') {
			// Если опция типа select
			$option_values[product_option_id] = $('select[name="option['+product_option_id+']"] :selected').val();

		} else {
			// Если опция типа input
			$option_values[product_option_id] = $('input[name="option['+product_option_id+']"]:checked').val();
		}
	});
	return $option_values;
} // getOptionValues()

//------------------------------------------------------------------------------------------------------------------------------
// Функция по выбранным опциям возвращает product_feature_id
// $option_values - объект с опциями и значений
// Возвращает ид характеристики, если вариант выбранныхопций не существует ни в одной характеристики, то вернет 0
function getProductFeature($option_values) {
	var new_product_feature_id = 0;
	$.each($options,function(feature_id, $product_options) {

		// Количество совпадений
		var matches = 0;

		// Перебираем все опции характеристики
		$.each($product_options,function(product_option_id, product_option_value_id) {

			// Ищем совпадение значений
			if ($option_values[product_option_id] == product_option_value_id) {
				matches ++;
			}
		});

		// Если совпали все опции
		if (matches == options_order.length) {

			// Сохраним значение характеристики где совпали все опции
			new_product_feature_id = feature_id;

			// Прервем цикл
			return false;
		}
	});

	return new_product_feature_id;
} // getProductFeature()

//------------------------------------------------------------------------------------------------------------------------------
// Функция устанавливает доступность опции типа input и ее значения
// current_product_option_value_id - текущее выбранное значение опции
// current_option_id - текущая опция в которой выбрано значение
// $option_values - объект в котором заданы все значения опций текущей характеристики
// Возвращает значение текущей опции
function setAccessInputOption(current_option_id, current_product_option_value_id, $option_values) {
	var val = 0;
	var required = false;

	// Перебираем все значения опций
	$('div#input-option'+current_option_id+' div label input').each(function(index){

		// Если в классе не содержится значение выбранной опции, то отключаем эту опцию и снимаем флажок
		if (!$(this).hasClass(current_product_option_value_id) && (current_product_option_value_id)) {
			$(this).attr("disabled",true);
			$(this).prop("checked",false);

		} else {

			required = true;

			// Включаем,если была отключена ранее
			$(this).attr("disabled",false);

			// Если есть в варианте текущее значение опции
			if ($option_values[current_option_id] == $(this).val()) {

				// И еще не выбрано значение
				if (!val) {
					val = $(this).val();
					$(this).prop("checked",true);
				} else {
					// Если значение уже было установлено, то с других опций снимаем выбор
					$(this).prop("checked",false);
				}
			} else {
				// Если вариант не содержит значение, снимаем выбор
				$(this).prop("checked",false);
				//$(this).attr("disabled",true);
			}
		}

	});
	$options_required[current_option_id] = required;
	return val;
} // setAccessSelectOption()

//------------------------------------------------------------------------------------------------------------------------------
// Функция устанавливает доступность опции типа select и ее значения
// current_product_option_value_id - текущее выбранное значение опции
// current_option_id - текущая опция в которой выбрано значение
// $option_values - объект в котором заданы все значения опций текущей характеристики
// Возвращает значение текущей опции
function setAccessSelectOption(current_option_id, current_product_option_value_id, $option_values) {
	var val = 0;
	var required = false;

	// Перебираем все значения опций
	$('select#input-option'+current_option_id+' option').each(function(index){

		// Если в классе не содержится значение выбранной опции,
		// и есть само значение и не первое, тогда отключаем эту опцию и снимаем флажок
		if (!$(this).hasClass(current_product_option_value_id) && (current_product_option_value_id) && index > 0) {
			$(this).attr("disabled",true);
			$(this).prop("selected",false);
		} else {

			required = true;

			// Значение содержится в классе, значит разблокируем если был заблокирован
			$(this).attr("disabled",false);

			// Если не было ранее выбрано значение, и не первое,
			// и в варианте для этой опции есть текущее значение
			if (!val && index > 0 && $option_values[current_option_id] == $(this).val()) {

				// Записываем выбранное значение
				val = $(this).val();

				// Выбираем его в селекте
				$(this).prop("selected",true);
			}
		}
	});
	$options_required[current_option_id] = required;
	return val;
} // setAccessSelectOption()

//------------------------------------------------------------------------------------------------------------------------------
// Функция устанавливает доступность опций и их значений
// current_product_option_value_id - текущее выбранное значение опции
// current_option_id - текущая опция в которой выбрано значение
// $option_values - объект в котором заданы все значения опций текущей характеристики
// Возвращает объект $option_values, теоретически он не меняется, оставлено временно для тестирования
function setAccessOptions(current_product_option_value_id, current_option_id, $option_values) {

	// Выберем опции по варианту
	$.each(options_order,function(index, product_option_id) {

		if (current_option_id == product_option_id) {
			$option_values[product_option_id] = current_product_option_value_id;
		} else {
			if ($options_type[product_option_id] == 'select') {

				// Установим доступность значений в опции типа select
				//$option_values[product_option_id] = setAccessSelectOption(product_option_id, current_product_option_value_id, $option_values);
				setAccessSelectOption(product_option_id, current_product_option_value_id, $option_values);
			} else {

				// Установим доступность значений в опции типа input
				//$option_values[product_option_id] = setAccessInputOption(product_option_id, current_product_option_value_id, $option_values);
				setAccessInputOption(product_option_id, current_product_option_value_id, $option_values);
			}
		}
	});

	return $option_values;
} // setAccessOptions()

//------------------------------------------------------------------------------------------------------------------------------
// Функция получает первый вариант опция по выбранному значению одной из опций
// product_option_value_id - значение выбранной опции
// Возвращает объект (index = product_option_id, value = product_option_value_id)
function getRightOption(product_option_value_id) {

	// Тут хранится вариант опций выбранной характеристики
	var $option_values = {};

	// Перебирем все опции
	$.each($options, function(sel_product_feature_id, $product_options) {

		// Прервем цикл, если ид характеристики уже определена
		if (product_feature_id) {
   			return false;
   		}

		// Перебираем все опции характеристики
		$.each($product_options, function(option_id, sel_product_option_value_id) {

			// Если значение неопределено, берем первую попавшуюся характеристику
			if (product_option_value_id == undefined) {

				// Запишем id характеристики, чтобы потом передать ее в корзину
				product_feature_id = sel_product_feature_id;

				// Получим вариант опций и значений этой характеристики
				$option_values = $product_options;

				// Прервем цикл
				return false;
			}

			// Если совпало значение опции в первой попавшейся характеристики, тогда выбираем ее, и получаем остальные значения опций
    		else if (sel_product_option_value_id == product_option_value_id) {

				// Запишем id характеристики, чтобы потом передать ее в корзину
				product_feature_id = sel_product_feature_id;

				// Получим вариант опций и значений этой характеристики
				$option_values = $product_options;

				// Прервем цикл
				return false;
    		}
   		});

	});

	return $option_values;
} // getRightOption()

//------------------------------------------------------------------------------------------------------------------------------
// Функция вызывается при изменении любой опции
// current_option_id - это номер опции в которой выбрано значение
// selected - выбранное значение опции, product_option_value_id
// type - тип опции, может иметь значение: select, input, radio, image
function selectOption(current_option_id, selected, type) {

	// Объект опций с выбранными значениями (index = опция, value = значение)
	var $option_values = {};

	// Получим существующие значения опций
	$option_values = getOptionValues();

	// Проверим вариант и получим id характеристики, если вариант неверный, тогда id = 0
	product_feature_id = getProductFeature($option_values);

	// Если опции не соответствуют ни одной характеристики, выставляем другие опции по первому совпадению в первой найденой характеристики
	if (!product_feature_id) {

		// Получим вариант опции по выбранному значению одной из опций
		// option_values это объект index = product_option_id, value = product_option_value_id
		$option_values = getRightOption(selected);

		// Устанавливает доступность значений всех опций
		setAccessOptions(selected, current_option_id, $option_values);

	}

	// Проверим опции на обязательные
	checkRequired();

	// Отображает выбранные данные
	displaySelect();
} // selectOption()

<?php } ?>
]]></add>
		</operation>
	  
		<operation>
			<search index="0"><![CDATA[$(document).ready(function() {]]></search>
			<add position="after"><![CDATA[<?php if ($options) {?>
	// Кнопки очистки опций, под каждый шаблон возможно придется править
	//$('select[name="option[9]"]').parent('div').before('<div class="form-group"><a href="#" id="clear_options">Очистить опции</a></div>');
	$('div#input-option7').parent('div').after('<div class="form-group"><a href="#" id="clear_options">Очистить опции</a></div>');
	//$('div#form-group').parent('div').after('<div class="form-group"><a href="#" id="clear_options">Очистить опции</a></div>');

	$('#product').find('h3').after('<div class="form-group"><a href="#" id="clear_options">Очистить опции</a></div>');

<?php foreach ($options as $option) { ?>
	//------------------------------------------------------------------------------------------------------------------------------
	// Функция обрабатывает значение при выборе опции
<?php
	$select_type = $option['type'] == "select" ? "select" : "input";
	$html = "	$('".$select_type."[name=\"option[".$option['product_option_id']."]\"]').change(function(){\n";
	$html .= "		var selected = ".($select_type  == "select" ? "$(':selected', this).val();" : "this.value;") . "\n";
	$html .= "		selectOption(".$option['product_option_id'].",selected,'".$select_type."');\n";
	$html .= "	});\n\n";
	echo $html;
	} ?>
	$('#product').on('click', '#clear_options', function(e){
		e.preventDefault();
		clearOptions();
	});

//	selectOption();

<?php } ?>
]]></add>
		</operation>
  </file>

</modification>